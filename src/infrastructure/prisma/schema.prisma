// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  tenantId      Int            @id @default(autoincrement())
  companyId     String         @unique
  companyName   String         @unique
  phoneNumber   String
  address       String?
  employees     Int
  users         User[]
  payrollCycles PayrollCycle[]
  creationDate  DateTime       @default(now())

  @@map("tenants")
}

model DocumentType {
  documentTypeId Int      @id @default(autoincrement())
  name           String
  code           String?
  users          User[]
  creationDate   DateTime @default(now())

  @@map("documentTypes")
}

model User {
  userId            Int           @id @default(autoincrement())
  documentNumber    String
  firstName         String
  lastName          String?
  email             String
  phoneNumber       String?
  password          String
  activated         Boolean       @default(true)
  tenant            Tenant        @relation(fields: [tenantId], references: [tenantId])
  tenantId          Int
  documentType      DocumentType  @relation(fields: [documentTypeId], references: [documentTypeId])
  documentTypeId    Int
  wageRate          Decimal
  grossCompensation Decimal
  netCompensation   Decimal
  creationDate      DateTime      @default(now())
  bankAccounts      BankAccount[]
  workRecords       WorkRecord[]

  @@map("users")
}

model BankAccountType {
  bankAccountTypeId Int           @id @default(autoincrement())
  name              String
  creationDate      DateTime      @default(now())
  bankAccounts      BankAccount[]

  @@map("bankAccountTypes")
}

model Banks {
  bankId       Int           @id @default(autoincrement())
  code         String
  name         String
  creationDate DateTime      @default(now())
  bankAccounts BankAccount[]

  @@map("banks")
}

model BankAccount {
  bankAccountId     Int             @id @default(autoincrement())
  number            String
  bankAccountType   BankAccountType @relation(fields: [bankAccountTypeId], references: [bankAccountTypeId])
  bankAccountTypeId Int
  creationDate      DateTime        @default(now())
  user              User            @relation(fields: [userId], references: [userId])
  userId            Int
  bank              Banks           @relation(fields: [bankId], references: [bankId])
  bankId            Int
  transactions      Transaction[]

  @@map("bankAccounts")
}

model TransactionStatus {
  transactionStatusId Int           @id @default(autoincrement())
  name                String
  creationDate        DateTime      @default(now())
  transactions        Transaction[]

  @@map("transactionStatus")
}

model Currency {
  currencyId   Int           @id @default(autoincrement())
  name         String
  creationDate DateTime      @default(now())
  transactions Transaction[]

  @@map("currencies")
}

// the main account
model Account {
  accountId    Int           @id @default(autoincrement())
  name         String
  token        String
  privateKey   String
  creationDate DateTime      @default(now())
  transactions Transaction[]

  @@map("accounts")
}

model PayrollCycleStatus {
  payrollCycleStatusId Int      @id @default(autoincrement())
  name                 String
  creationDate         DateTime @default(now())

  @@map("payrollCycleStatus")
}

model PayrollCycle {
  payrollCycleId    Int           @id @default(autoincrement())
  tenant            Tenant        @relation(fields: [tenantId], references: [tenantId])
  tenantId          Int
  initDate          DateTime
  endDate           DateTime
  totalGrossEarning Decimal
  totalNetEarning   Decimal
  transactions      Transaction[]
  transactionId     Int
  workRecords       WorkRecord[]

  @@map("payrollCycles")
}

model WorkRecord {
  workRecordId     Int          @id @default(autoincrement())
  payrollCycle     PayrollCycle @relation(fields: [payrollCycleId], references: [payrollCycleId])
  payrollCycleId   Int
  user             User         @relation(fields: [userId], references: [userId])
  userId           Int
  startTime        DateTime?
  endTime          DateTime?
  totalHoursWorked Decimal
  grossEarning     Decimal
  netEarning       Decimal

  @@map("workRecords")
}

model Transaction {
  transactionId       Int               @id @default(autoincrement())
  account             Account           @relation(fields: [accountId], references: [accountId])
  accountId           Int
  requestedAmount     Decimal
  currency            Currency          @relation(fields: [currencyId], references: [currencyId])
  currencyId          Int
  bankAccount         BankAccount       @relation(fields: [bankAccountId], references: [bankAccountId])
  bankAccountId       Int
  transactionStatus   TransactionStatus @relation(fields: [transactionStatusId], references: [transactionStatusId])
  transactionStatusId Int
  creationDate        DateTime          @default(now())
  payrollCycle        PayrollCycle      @relation(fields: [payrollCycleId], references: [payrollCycleId])
  payrollCycleId      Int

  @@map("transactions")
}
